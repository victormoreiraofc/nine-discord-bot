const Discord = require("discord.js");

const canaisDeSugestao = {};

module.exports = {
  name: "configreacoes",
  description: "Configure o sistema de recebimento de cargo no servidor.",
  type: Discord.ApplicationCommandType.ChatInput,

  run: async (client, interaction) => {

    if (!interaction.member.permissions.has(Discord.PermissionFlagsBits.ManageGuild)) {
        interaction.reply({ content: `â›” | ${interaction.user} VocÃª nÃ£o possui permissÃ£o para utilizar este comando, para executar esse comando vocÃª precisa ter a permissÃ£o de Adminstrador.`, ephemeral: true })
    } else {
        let embed = new Discord.EmbedBuilder()
        .setColor("#2B2D31")
        .setTitle(`\`ğŸ’» Painel de ConfiguraÃ§Ã£o\``)
        .setDescription("Â¬ Bem-vindo ao painel de configuraÃ§Ã£o de recebimento de cargo! \nÂ¬ Escolha qual tipo de recebimento de cargo vocÃª prefere.")
        .setFooter({text:`ğŸ“Œ Configure o sistema de recebimento de cargo para que ele seja ativado.`});

        let painel = new Discord.ActionRowBuilder().addComponents(
            new Discord.SelectMenuBuilder()
            .setCustomId("painel_reacao")
            .setPlaceholder("Selecione uma opÃ§Ã£o")
            .addOptions(
                {
                    label: "Configurar FormulÃ¡rio",
                    emoji: "ğŸ§¾",
                    description: "Recebimento de cargos por formulÃ¡rio.",
                    value: "opc1"
                },
                {
                    label: "Configurar BotÃ£o",
                    emoji: "ğŸ§©",
                    description: "Recebimento de cargos por botÃ£o.",
                    value: "opc2"
                },
                {
                    label: "Configurar Emoji",
                    emoji: "ğŸ˜€",
                    description: "Recebimento de cargos por reaÃ§Ã£o.",
                    value: "opc3"
                }
            )
        );

        interaction.reply({ content: `âœ… | ${interaction.user} VocÃª estÃ¡ configurando o sistema de recebimento de cargo!`, ephemeral: true });
        interaction.channel.send({ embeds: [embed], components: [painel] })
    }


  }
}
