{"version":3,"file":"discord-button.js","sourceRoot":"","sources":["../../../src/components/discord-button/discord-button.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAsB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAC7F,OAAO,QAAQ,MAAM,gBAAgB,CAAC;AACtC,OAAO,UAAU,MAAM,qBAAqB,CAAC;AAM7C,MAAM,OAAO,aAAa;;;qBAiBN,OAAO;;oBAYR,KAAK;gBAO4C,WAAW;;EAGvE,UAAU,CAAC,KAAa;IAC9B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;MAC9B,MAAM,IAAI,SAAS,CAAC,6CAA6C,CAAC,CAAC;KACnE;SAAM,IAAI,CAAC,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;MAC/E,MAAM,IAAI,UAAU,CAAC,4FAA4F,CAAC,CAAC;KACnH;EACF,CAAC;EAEM,MAAM;IACZ,MAAM,MAAM,GAAgC,IAAI,CAAC,EAAE,CAAC,aAA4C,CAAC;IAEjG,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,oBAAoB,EAAE;MAC1D,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;KACpG;IAED,MAAM,OAAO,GAAG,CACf,EAAC,QAAQ;MACP,IAAI,CAAC,KAAK,IAAI,WAAK,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAC,sBAAsB,GAAG;MAC3G;QACC,eAAQ,CACF;MACN,IAAI,CAAC,GAAG,IAAI,EAAC,UAAU,IAAC,KAAK,EAAC,uBAAuB,GAAG,CAC/C,CACX,CAAC;IAEF,OAAO,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CACnC,SAAG,KAAK,EAAC,yCAAyC,EAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,MAAM,EAAC,QAAQ,EAAC,GAAG,EAAC,qBAAqB,IAC1G,OAAO,CACL,CACJ,CAAC,CAAC,CAAC,CACH,EAAC,IAAI,IAAC,KAAK,EAAE,iCAAiC,IAAI,CAAC,IAAI,mBAAmB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,EAAE,IAAG,OAAO,CAAQ,CACtI,CAAC;EACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACD","sourcesContent":["import { Component, ComponentInterface, Element, h, Host, Prop, Watch } from '@stencil/core';\nimport Fragment from '../../Fragment';\nimport LaunchIcon from '../svgs/launch-icon';\n\n@Component({\n\ttag: 'discord-button',\n\tstyleUrl: 'discord-button.css'\n})\nexport class DiscordButton implements ComponentInterface {\n\t/**\n\t * The DiscordButton element.\n\t */\n\t@Element()\n\tpublic el: HTMLElement;\n\n\t/**\n\t * The emoji URL to use in the button.\n\t */\n\t@Prop()\n\tpublic emoji: string;\n\n\t/**\n\t * The name of the emoji used in the button.\n\t */\n\t@Prop()\n\tpublic emojiName = 'emoji';\n\n\t/**\n\t * The URL for the button. Setting this will force the button type to be `secondary`.\n\t */\n\t@Prop()\n\tpublic url: string;\n\n\t/**\n\t * Whether to show the button as disabled.\n\t */\n\t@Prop()\n\tpublic disabled = false;\n\n\t/**\n\t * The type of button this is, this will change the color of the button.\n\t * Valid values: `primary`, `secondary`, `success`, `destructive`.\n\t */\n\t@Prop()\n\tpublic type: 'primary' | 'secondary' | 'success' | 'destructive' = 'secondary';\n\n\t@Watch('type')\n\tpublic handleType(value: string) {\n\t\tif (typeof value !== 'string') {\n\t\t\tthrow new TypeError('DiscordButton `type` prop must be a string.');\n\t\t} else if (!['primary', 'secondary', 'success', 'destructive'].includes(value)) {\n\t\t\tthrow new RangeError(\"DiscordButton `type` prop must be one of: 'primary', 'secondary', 'success', 'destructive'\");\n\t\t}\n\t}\n\n\tpublic render() {\n\t\tconst parent: HTMLDiscordActionRowElement = this.el.parentElement as HTMLDiscordActionRowElement;\n\n\t\tif (parent.tagName.toLowerCase() !== 'discord-action-row') {\n\t\t\tthrow new Error('All <discord-button> components must be direct children of <discord-action-row>.');\n\t\t}\n\n\t\tconst content = (\n\t\t\t<Fragment>\n\t\t\t\t{this.emoji && <img src={this.emoji} alt={this.emojiName} draggable={false} class=\"discord-button-emoji\" />}\n\t\t\t\t<span>\n\t\t\t\t\t<slot />\n\t\t\t\t</span>\n\t\t\t\t{this.url && <LaunchIcon class=\"discord-button-launch\" />}\n\t\t\t</Fragment>\n\t\t);\n\n\t\treturn this.url && !this.disabled ? (\n\t\t\t<a class=\"discord-button discord-button-secondary\" href={this.url} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t{content}\n\t\t\t</a>\n\t\t) : (\n\t\t\t<Host class={`discord-button discord-button-${this.type} discord-button-${this.disabled ? 'disabled' : 'hoverable'}`}>{content}</Host>\n\t\t);\n\t}\n}\n"]}