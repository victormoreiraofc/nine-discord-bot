{"version":3,"file":"discord-reply.js","sourceRoot":"","sources":["../../../src/components/discord-reply/discord-reply.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, ComponentInterface, Element, h, Host, Prop } from '@stencil/core';\nimport Fragment from '../../Fragment';\nimport { avatars, Profile, profiles } from '../../options';\nimport AttachmentReply from '../svgs/attachment-reply';\nimport CommandReply from '../svgs/command-reply';\nimport ReplyIcon from '../svgs/reply-icon';\nimport VerifiedTick from '../svgs/verified-tick';\n\n@Component({\n\ttag: 'discord-reply',\n\tstyleUrl: 'discord-reply.css'\n})\nexport class DiscordReply implements ComponentInterface {\n\t/**\n\t * The DiscordReply element.\n\t */\n\t@Element()\n\tpublic el: HTMLElement;\n\n\t/**\n\t * The id of the profile data to use.\n\t */\n\t@Prop()\n\tpublic profile: string;\n\n\t/**\n\t * The message author's username.\n\t * @default 'User'\n\t */\n\t@Prop()\n\tpublic author = 'User';\n\n\t/**\n\t * The message author's avatar. Can be an avatar shortcut, relative path, or external link.\n\t */\n\t@Prop()\n\tpublic avatar: string;\n\n\t/**\n\t * Whether the message author is a bot or not.\n\t * Only works if `server` is `false` or `undefined`.\n\t */\n\t@Prop()\n\tpublic bot = false;\n\n\t/**\n\t * Whether the message author is a server crosspost webhook or not.\n\t * Only works if `bot` is `false` or `undefined`.\n\t */\n\t@Prop()\n\tpublic server = false;\n\n\t/**\n\t * Whether the author is the original poster.\n\t */\n\t@Prop()\n\tpublic op = false;\n\n\t/**\n\t * Whether the bot is verified or not.\n\t * Only works if `bot` is `true`\n\t */\n\t@Prop()\n\tpublic verified = false;\n\n\t/**\n\t * Whether the message has been edited or not.\n\t */\n\t@Prop()\n\tpublic edited = false;\n\n\t/**\n\t * The message author's primary role color. Can be any [CSS color value](https://www.w3schools.com/cssref/css_colors_legal.asp).\n\t */\n\t@Prop()\n\tpublic roleColor: string;\n\n\t/**\n\t * Whether the referenced message is from a response of a slash command.\n\t */\n\t@Prop()\n\tpublic command = false;\n\n\t/**\n\t * Whether the referenced message contains attachments.\n\t */\n\t@Prop()\n\tpublic attachment = false;\n\n\t/**\n\t * Whether this reply pings the original message sender, prepending an \"@\" on the author's username.\n\t */\n\t@Prop()\n\tpublic mentions = false;\n\n\tpublic render() {\n\t\tconst parent: HTMLDiscordMessageElement = this.el.parentElement as HTMLDiscordMessageElement;\n\n\t\tif (parent.tagName.toLowerCase() !== 'discord-message') {\n\t\t\tthrow new Error('All <discord-reply> components must be direct children of <discord-message>.');\n\t\t}\n\n\t\tconst resolveAvatar = (avatar: string): string => avatars[avatar] ?? avatar ?? avatars.default;\n\n\t\tconst defaultData: Profile = {\n\t\t\tauthor: this.author,\n\t\t\tbot: this.bot,\n\t\t\tverified: this.verified,\n\t\t\top: this.op,\n\t\t\tserver: this.server,\n\t\t\troleColor: this.roleColor\n\t\t};\n\t\tconst profileData: Profile = Reflect.get(profiles, this.profile) ?? {};\n\t\tconst profile: Profile = { ...defaultData, ...profileData, ...{ avatar: resolveAvatar(profileData.avatar ?? this.avatar) } };\n\n\t\tconst messageParent: HTMLDiscordMessagesElement = parent.parentElement as HTMLDiscordMessagesElement;\n\n\t\treturn (\n\t\t\t<Host class=\"discord-replied-message\">\n\t\t\t\t{messageParent.compactMode ? (\n\t\t\t\t\t<div class=\"discord-reply-badge\">\n\t\t\t\t\t\t<ReplyIcon />\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<img class=\"discord-replied-message-avatar\" src={profile.avatar} alt={profile.author} />\n\t\t\t\t)}\n\t\t\t\t{\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t{profile.bot && !profile.server && (\n\t\t\t\t\t\t\t<span class=\"discord-application-tag\">\n\t\t\t\t\t\t\t\t{profile.verified && <VerifiedTick />}\n\t\t\t\t\t\t\t\tBot\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{profile.server && !profile.bot && <span class=\"discord-application-tag\">Server</span>}\n\t\t\t\t\t\t{profile.op && <span class=\"discord-application-tag discord-application-tag-op\">OP</span>}\n\t\t\t\t\t</Fragment>\n\t\t\t\t}\n\t\t\t\t<span class=\"discord-replied-message-username\" style={{ color: profile.roleColor ?? '' }}>\n\t\t\t\t\t{this.mentions && '@'}\n\t\t\t\t\t{profile.author}\n\t\t\t\t</span>\n\t\t\t\t<div class=\"discord-replied-message-content\">\n\t\t\t\t\t<slot />\n\t\t\t\t\t{this.edited ? <span class=\"discord-message-edited\">(edited)</span> : ''}\n\t\t\t\t</div>\n\t\t\t\t{this.command ? (\n\t\t\t\t\t<CommandReply class=\"discord-replied-message-content-icon\" />\n\t\t\t\t) : (\n\t\t\t\t\tthis.attachment && <AttachmentReply class=\"discord-replied-message-content-icon\" />\n\t\t\t\t)}\n\t\t\t</Host>\n\t\t);\n\t}\n}\n"]}