{"version":3,"file":"discord-embed.js","sourceRoot":"","sources":["../../../src/components/discord-embed/discord-embed.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, ComponentInterface, Element, h, Prop, State } from '@stencil/core';\nimport clsx from 'clsx';\nimport Fragment from '../../Fragment';\nimport type { Emoji } from '../../options';\nimport { getGlobalEmojiUrl } from '../../util';\n\n@Component({\n\ttag: 'discord-embed',\n\tstyleUrl: 'discord-embed.css'\n})\nexport class DiscordEmbed implements ComponentInterface {\n\t/**\n\t * The DiscordEmbed element.\n\t */\n\t@Element()\n\tpublic el: HTMLElement;\n\n\t/**\n\t * The color to use for the embed's left border. Can be any [CSS color value](https://www.w3schools.com/cssref/css_colors_legal.asp).\n\t */\n\t@Prop()\n\tpublic color: string;\n\n\t/**\n\t * The author's name.\n\t */\n\t@Prop()\n\tpublic authorName: string;\n\n\t/**\n\t * The author's avatar URL.\n\t */\n\t@Prop()\n\tpublic authorImage: string;\n\n\t/**\n\t * The URL to open when you click on the author's name.\n\t */\n\t@Prop()\n\tpublic authorUrl: string;\n\n\t/**\n\t * The embed title.\n\t */\n\t@Prop()\n\tpublic embedTitle: string;\n\n\t/**\n\t * The URL to open when you click on the embed title.\n\t */\n\t@Prop()\n\tpublic url: string;\n\n\t/**\n\t * The thumbnail image to use.\n\t */\n\t@Prop()\n\tpublic thumbnail: string;\n\n\t/**\n\t * The embed image to use (displayed at the bottom).\n\t */\n\t@Prop()\n\tpublic image: string;\n\n\t/**\n\t * The embed video to use (displayed at the bottom, same slot as the image).\n\t * @important YouTube videos will not be playable on your projects, this is due to YouTube using DASH to play their videos rather\n\t * than providing the raw media stream (in a container such as mp4 or ogg). Links to regular MP4 files (such as on a CDN) however\n\t * will autoplay!\n\t * @note Video takes priority over image.\n\t * @remark Providing both a video and an image will ensure the image is shown to users with browsers\n\t * that do not support HTML5 video playback.\n\t * @example https://download.blender.org/peach/bigbuckbunny_movies/big_buck_bunny_1080p_stereo.ogg\n\t */\n\t@Prop()\n\tpublic video: string;\n\n\t/**\n\t * The provider to show above the embed, for example for YouTube videos it will show \"YouTube\" at the top of the embed (above the author)\n\t * @example YouTube\n\t */\n\t@Prop()\n\tpublic provider: string;\n\n\tprivate hasPerformedRerenderChecks: 'dirty' | 'pristine' = 'pristine';\n\n\t@State()\n\tprivate hasProvidedDescriptionSlot = true;\n\n\tpublic componentDidRender() {\n\t\tif (this.hasPerformedRerenderChecks === 'pristine') {\n\t\t\ttry {\n\t\t\t\tconst discordEmbedDescriptionChild = this.el.querySelector('.discord-embed-description');\n\t\t\t\tthis.hasProvidedDescriptionSlot = Boolean(discordEmbedDescriptionChild?.innerHTML.trim());\n\t\t\t} finally {\n\t\t\t\tthis.hasPerformedRerenderChecks = 'dirty';\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic render() {\n\t\tconst emojiParsedAuthorName = this.parseTitle(this.authorName);\n\t\tconst emojiParsedEmbedTitle = this.parseTitle(this.embedTitle);\n\n\t\treturn (\n\t\t\t<div class=\"discord-embed\">\n\t\t\t\t<div style={{ 'background-color': this.color }} class=\"discord-left-border\"></div>\n\t\t\t\t<div class=\"discord-embed-root\">\n\t\t\t\t\t<div class=\"discord-embed-wrapper\">\n\t\t\t\t\t\t<div class=\"discord-embed-grid\">\n\t\t\t\t\t\t\t{this.provider && (\n\t\t\t\t\t\t\t\t<div class=\"discord-embed-provider\">\n\t\t\t\t\t\t\t\t\t<Fragment>{this.provider}</Fragment>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{emojiParsedAuthorName && (\n\t\t\t\t\t\t\t\t<div class=\"discord-embed-author\">\n\t\t\t\t\t\t\t\t\t{this.authorImage ? <img src={this.authorImage} alt=\"\" class=\"discord-author-image\" /> : ''}\n\t\t\t\t\t\t\t\t\t{this.authorUrl ? (\n\t\t\t\t\t\t\t\t\t\t<a href={this.authorUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\t\t\t\t\t\t{...emojiParsedAuthorName}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<Fragment>{...emojiParsedAuthorName}</Fragment>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{emojiParsedEmbedTitle && (\n\t\t\t\t\t\t\t\t<div class=\"discord-embed-title\">\n\t\t\t\t\t\t\t\t\t{this.url ? (\n\t\t\t\t\t\t\t\t\t\t<a href={this.url} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\t\t\t\t\t\t{...emojiParsedEmbedTitle}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<Fragment>{...emojiParsedEmbedTitle}</Fragment>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{this.hasProvidedDescriptionSlot && <slot name=\"description\"></slot>}\n\n\t\t\t\t\t\t\t<slot name=\"fields\"></slot>\n\t\t\t\t\t\t\t{this.image || this.video ? (\n\t\t\t\t\t\t\t\t<div class={clsx('discord-embed-media', { 'discord-embed-media-video': Boolean(this.video) })}>\n\t\t\t\t\t\t\t\t\t{this.renderMedia()}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : null}\n\n\t\t\t\t\t\t\t{this.thumbnail ? <img src={this.thumbnail} alt=\"\" class=\"discord-embed-thumbnail\" /> : ''}\n\t\t\t\t\t\t\t<slot name=\"footer\"></slot>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tprivate renderMedia() {\n\t\tif (this.video) {\n\t\t\treturn (\n\t\t\t\t<video controls muted preload=\"none\" poster={this.image} src={this.video} height=\"225\" width=\"400\" class=\"discord-embed-video\">\n\t\t\t\t\t<img src={this.image} alt=\"Discord embed media\" class=\"discord-embed-image\" />\n\t\t\t\t</video>\n\t\t\t);\n\t\t} else if (this.image) {\n\t\t\treturn <img src={this.image} alt=\"Discord embed media\" class=\"discord-embed-image\" />;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate parseTitle(title?: string) {\n\t\tif (!title) return null;\n\n\t\tconst words = title.split(' ');\n\n\t\treturn words.map((word: string, idx: number) => {\n\t\t\tconst emoji = getGlobalEmojiUrl(word) ?? ({} as Emoji);\n\t\t\tlet el = '';\n\t\t\tif (emoji.name) {\n\t\t\t\tel = (\n\t\t\t\t\t<span class=\"discord-embed-custom-emoji\">\n\t\t\t\t\t\t<img src={emoji.url} alt={emoji.name} class=\"discord-embed-custom-emoji-image\" />\n\t\t\t\t\t\t<span>&nbsp;</span>\n\t\t\t\t\t</span>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tel = idx < words.length - 1 ? `${word} ` : word;\n\t\t\t}\n\t\t\treturn el;\n\t\t});\n\t}\n}\n"]}