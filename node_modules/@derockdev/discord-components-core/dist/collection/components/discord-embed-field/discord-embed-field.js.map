{"version":3,"file":"discord-embed-field.js","sourceRoot":"","sources":["../../../src/components/discord-embed-field/discord-embed-field.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAsB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAC7F,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,iBAAiB,EAAE,MAAM,YAAY,CAAC;AAM/C,MAAM,OAAO,iBAAiB;;IA4BrB,uBAAkB,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;kBAXhC,KAAK;uBASA,CAAC;;EAKf,gBAAgB,CAAC,KAAuC;IAC9D,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;MAAE,MAAM,IAAI,UAAU,CAAC,iEAAiE,CAAC,CAAC;EAC1I,CAAC;EAEM,mBAAmB;IACzB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;EACzC,CAAC;EAEM,MAAM;IACZ,MAAM,MAAM,GAAiC,IAAI,CAAC,EAAE,CAAC,aAA6C,CAAC;IAEnG,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,sBAAsB,EAAE;MAC5D,MAAM,IAAI,WAAW,CAAC,yFAAyF,CAAC,CAAC;KACjH;IAED,MAAM,0BAA0B,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAEpE,OAAO,CACN,EAAC,IAAI,IACJ,KAAK,EAAE,IAAI,CACV;QACC,4BAA4B,EAAE,IAAI,CAAC,MAAM;QACzC,8BAA8B,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC;QACrE,8BAA8B,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC;QACrE,8BAA8B,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC;OACrE,EACD,qBAAqB,CACrB;MAEA,0BAA0B,IAAI,WAAK,KAAK,EAAC,qBAAqB,IAAE,CAAC,GAAG,0BAA0B,CAAC,CAAO;MACvG,eAAa,CACP,CACP,CAAC;EACH,CAAC;EAEO,UAAU,CAAC,KAAc;IAChC,IAAI,CAAC,KAAK;MAAE,OAAO,IAAI,CAAC;IAExB,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAE/B,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAY,EAAE,GAAW,EAAE,EAAE;;MAC9C,MAAM,KAAK,GAAG,MAAA,iBAAiB,CAAC,IAAI,CAAC,mCAAK,EAAY,CAAC;MACvD,IAAI,EAAE,GAAG,EAAE,CAAC;MACZ,IAAI,KAAK,CAAC,IAAI,EAAE;QACf,EAAE,GAAG,CACJ,YAAM,KAAK,EAAC,4BAA4B;UACvC,WAAK,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAC,kCAAkC,GAAG;UACjF,yBAAmB,CACb,CACP,CAAC;OACF;WAAM;QACN,EAAE,GAAG,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;OAChD;MACD,OAAO,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACD","sourcesContent":["import { Component, ComponentInterface, Element, h, Host, Prop, Watch } from '@stencil/core';\nimport clsx from 'clsx';\nimport type { Emoji } from '../../options';\nimport { getGlobalEmojiUrl } from '../../util';\n\n@Component({\n\ttag: 'discord-embed-field',\n\tstyleUrl: 'discord-embed-field.css'\n})\nexport class DiscordEmbedField implements ComponentInterface {\n\t/**\n\t * The DiscordEmbedField element\n\t */\n\t@Element()\n\tpublic el: HTMLElement;\n\n\t/**\n\t * The field's title.\n\t */\n\t@Prop()\n\tpublic fieldTitle!: string;\n\n\t/**\n\t * Whether this field should be displayed inline or not.\n\t */\n\t@Prop()\n\tpublic inline = false;\n\n\t/**\n\t * The index of this inline field\n\t * @remark This defines the position of this inline field. 1 is left, 2 is middle and 3 is right.\n\t * @oneof [1, 2, 3]\n\t * @default 1\n\t */\n\t@Prop()\n\tpublic inlineIndex = 1;\n\n\tprivate validInlineIndices = new Set([1, 2, 3]);\n\n\t@Watch('inlineIndex')\n\tpublic checkInlineIndex(value: DiscordEmbedField['inlineIndex']) {\n\t\tif (!this.validInlineIndices.has(Number(value))) throw new RangeError('DiscordEmbedField `inlineIndex` prop must be one of: 1, 2, or 3');\n\t}\n\n\tpublic componentWillRender() {\n\t\tthis.checkInlineIndex(this.inlineIndex);\n\t}\n\n\tpublic render() {\n\t\tconst parent: HTMLDiscordEmbedFieldElement = this.el.parentElement as HTMLDiscordEmbedFieldElement;\n\n\t\tif (parent.tagName.toLowerCase() !== 'discord-embed-fields') {\n\t\t\tthrow new SyntaxError('All <discord-embed-field> components must be direct children of <discord-embed-fields>.');\n\t\t}\n\n\t\tconst emojiParsedEmbedFieldTitle = this.parseTitle(this.fieldTitle);\n\n\t\treturn (\n\t\t\t<Host\n\t\t\t\tclass={clsx(\n\t\t\t\t\t{\n\t\t\t\t\t\t'discord-embed-inline-field': this.inline,\n\t\t\t\t\t\t'discord-embed-inline-field-1': this.inline && this.inlineIndex === 1,\n\t\t\t\t\t\t'discord-embed-inline-field-2': this.inline && this.inlineIndex === 2,\n\t\t\t\t\t\t'discord-embed-inline-field-3': this.inline && this.inlineIndex === 3\n\t\t\t\t\t},\n\t\t\t\t\t'discord-embed-field'\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{emojiParsedEmbedFieldTitle && <div class=\"discord-field-title\">{[...emojiParsedEmbedFieldTitle]}</div>}\n\t\t\t\t<slot></slot>\n\t\t\t</Host>\n\t\t);\n\t}\n\n\tprivate parseTitle(title?: string) {\n\t\tif (!title) return null;\n\n\t\tconst words = title.split(' ');\n\n\t\treturn words.map((word: string, idx: number) => {\n\t\t\tconst emoji = getGlobalEmojiUrl(word) ?? ({} as Emoji);\n\t\t\tlet el = '';\n\t\t\tif (emoji.name) {\n\t\t\t\tel = (\n\t\t\t\t\t<span class=\"discord-embed-custom-emoji\">\n\t\t\t\t\t\t<img src={emoji.url} alt={emoji.name} class=\"discord-embed-custom-emoji-image\" />\n\t\t\t\t\t\t<span>&nbsp;</span>\n\t\t\t\t\t</span>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tel = idx < words.length - 1 ? `${word} ` : word;\n\t\t\t}\n\t\t\treturn el;\n\t\t});\n\t}\n}\n"]}